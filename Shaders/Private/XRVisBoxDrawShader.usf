#include "/Engine/Public/Platform.ush"


float4x4 ViewProj;
float4x4 ModelMatrix;

struct V2P
{
	float4 Position : SV_POSITION;
	float3 Color : COLOR0;
};

float3 random_color(uint seed)
{
	// generate random color
	seed = (seed ^ 61u) ^ (seed >> 16u);
	seed *= 9u;
	seed = seed ^ (seed >> 4u);
	seed *= 0x27d4eb2du;
	seed = seed ^ (seed >> 15u);

	// to rgb color
	float r = float((seed & 0xFFu)) / 255.0;
	float g = float((seed >> 8u) & 0xFFu) / 255.0;
	float b = float((seed >> 16u) & 0xFFu) / 255.0;

	return float3(r, g, b);
}

V2P VS(
	uint vertexID : SV_VertexID,
	in float3 Position : ATTRIBUTE0)
{
	V2P v2p;
	// 应用视图投影矩阵变换
	float4 tempPosition = mul(float4(Position, 1.f), ModelMatrix);
	v2p.Position = mul(tempPosition, ViewProj);
	v2p.Color = random_color(vertexID / 24);

	return v2p;
}

float4 PS(in V2P v2p) : SV_Target0
{
	// 使用归一化后的位置作为颜色（更明亮）
	float3 normalizedPos = normalize(v2p.Position.xyz);
	return float4(v2p.Color, 1.0f);
}